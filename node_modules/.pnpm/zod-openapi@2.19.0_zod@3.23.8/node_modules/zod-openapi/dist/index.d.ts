import { ZodType, AnyZodObject, ZodTypeDef, ZodTypeAny, z, ZodDate, ZodObject } from 'zod';

type IExtensionName = `x-${string}`;
type IExtensionType = any;
type ISpecificationExtension = {
    [extensionName: IExtensionName]: IExtensionType;
};

interface ServerObject extends ISpecificationExtension {
    url: string;
    description?: string;
    variables?: {
        [v: string]: ServerVariableObject;
    };
}
interface ServerVariableObject extends ISpecificationExtension {
    enum?: string[] | boolean[] | number[];
    default: string | boolean | number;
    description?: string;
}

interface OpenAPIObject$1 extends ISpecificationExtension {
    openapi: string;
    info: InfoObject$1;
    servers?: ServerObject[];
    paths: PathsObject$1;
    components?: ComponentsObject$2;
    security?: SecurityRequirementObject$1[];
    tags?: TagObject$1[];
    externalDocs?: ExternalDocumentationObject$1;
}
interface InfoObject$1 extends ISpecificationExtension {
    title: string;
    description?: string;
    termsOfService?: string;
    contact?: ContactObject$1;
    license?: LicenseObject$1;
    version: string;
}
interface ContactObject$1 extends ISpecificationExtension {
    name?: string;
    url?: string;
    email?: string;
}
interface LicenseObject$1 extends ISpecificationExtension {
    name: string;
    url?: string;
}
interface ComponentsObject$2 extends ISpecificationExtension {
    schemas?: {
        [schema: string]: SchemaObject$2 | ReferenceObject$1;
    };
    responses?: {
        [response: string]: ResponseObject$1 | ReferenceObject$1;
    };
    parameters?: {
        [parameter: string]: ParameterObject$1 | ReferenceObject$1;
    };
    examples?: {
        [example: string]: ExampleObject$1 | ReferenceObject$1;
    };
    requestBodies?: {
        [request: string]: RequestBodyObject$1 | ReferenceObject$1;
    };
    headers?: {
        [header: string]: HeaderObject$1 | ReferenceObject$1;
    };
    securitySchemes?: {
        [securityScheme: string]: SecuritySchemeObject$1 | ReferenceObject$1;
    };
    links?: {
        [link: string]: LinkObject$1 | ReferenceObject$1;
    };
    callbacks?: {
        [callback: string]: CallbackObject$1 | ReferenceObject$1;
    };
}
interface PathsObject$1 extends ISpecificationExtension {
    [path: string]: PathItemObject$1;
}
type PathObject$1 = PathsObject$1;
interface PathItemObject$1 extends ISpecificationExtension {
    $ref?: string;
    summary?: string;
    description?: string;
    get?: OperationObject$1;
    put?: OperationObject$1;
    post?: OperationObject$1;
    delete?: OperationObject$1;
    options?: OperationObject$1;
    head?: OperationObject$1;
    patch?: OperationObject$1;
    trace?: OperationObject$1;
    servers?: ServerObject[];
    parameters?: (ParameterObject$1 | ReferenceObject$1)[];
}
interface OperationObject$1 extends ISpecificationExtension {
    tags?: string[];
    summary?: string;
    description?: string;
    externalDocs?: ExternalDocumentationObject$1;
    operationId?: string;
    parameters?: (ParameterObject$1 | ReferenceObject$1)[];
    requestBody?: RequestBodyObject$1 | ReferenceObject$1;
    responses: ResponsesObject$1;
    callbacks?: CallbacksObject$1;
    deprecated?: boolean;
    security?: SecurityRequirementObject$1[];
    servers?: ServerObject[];
}
interface ExternalDocumentationObject$1 extends ISpecificationExtension {
    description?: string;
    url: string;
}
type ParameterLocation$1 = 'query' | 'header' | 'path' | 'cookie';
type ParameterStyle$1 = 'matrix' | 'label' | 'form' | 'simple' | 'spaceDelimited' | 'pipeDelimited' | 'deepObject';
interface BaseParameterObject$1 extends ISpecificationExtension {
    description?: string;
    required?: boolean;
    deprecated?: boolean;
    allowEmptyValue?: boolean;
    style?: ParameterStyle$1;
    explode?: boolean;
    allowReserved?: boolean;
    schema?: SchemaObject$2 | ReferenceObject$1;
    examples?: {
        [param: string]: ExampleObject$1 | ReferenceObject$1;
    };
    example?: any;
    content?: ContentObject$1;
}
interface ParameterObject$1 extends BaseParameterObject$1 {
    name: string;
    in: ParameterLocation$1;
}
interface RequestBodyObject$1 extends ISpecificationExtension {
    description?: string;
    content: ContentObject$1;
    required?: boolean;
}
interface ContentObject$1 {
    [mediatype: string]: MediaTypeObject$1;
}
interface MediaTypeObject$1 extends ISpecificationExtension {
    schema?: SchemaObject$2 | ReferenceObject$1;
    examples?: ExamplesObject$1;
    example?: any;
    encoding?: EncodingObject$1;
}
interface EncodingObject$1 extends ISpecificationExtension {
    [property: string]: EncodingPropertyObject$1 | any;
}
interface EncodingPropertyObject$1 {
    contentType?: string;
    headers?: {
        [key: string]: HeaderObject$1 | ReferenceObject$1;
    };
    style?: string;
    explode?: boolean;
    allowReserved?: boolean;
    [key: string]: any;
}
interface ResponsesObject$1 extends ISpecificationExtension {
    default?: ResponseObject$1 | ReferenceObject$1;
    [statuscode: string]: ResponseObject$1 | ReferenceObject$1 | any;
}
interface ResponseObject$1 extends ISpecificationExtension {
    description: string;
    headers?: HeadersObject$1;
    content?: ContentObject$1;
    links?: LinksObject$1;
}
interface CallbacksObject$1 extends ISpecificationExtension {
    [name: string]: CallbackObject$1 | ReferenceObject$1 | any;
}
interface CallbackObject$1 extends ISpecificationExtension {
    [name: string]: PathItemObject$1 | any;
}
interface HeadersObject$1 {
    [name: string]: HeaderObject$1 | ReferenceObject$1;
}
interface ExampleObject$1 {
    summary?: string;
    description?: string;
    value?: any;
    externalValue?: string;
    [property: string]: any;
}
interface LinksObject$1 {
    [name: string]: LinkObject$1 | ReferenceObject$1;
}
interface LinkObject$1 extends ISpecificationExtension {
    operationRef?: string;
    operationId?: string;
    parameters?: LinkParametersObject$1;
    requestBody?: any | string;
    description?: string;
    server?: ServerObject;
    [property: string]: any;
}
interface LinkParametersObject$1 {
    [name: string]: any | string;
}
interface HeaderObject$1 extends BaseParameterObject$1 {
    $ref?: string;
}
interface TagObject$1 extends ISpecificationExtension {
    name: string;
    description?: string;
    externalDocs?: ExternalDocumentationObject$1;
    [extension: string]: any;
}
interface ExamplesObject$1 {
    [name: string]: ExampleObject$1 | ReferenceObject$1;
}
interface ReferenceObject$1 {
    $ref: string;
}
type SchemaObjectType$1 = 'integer' | 'number' | 'string' | 'boolean' | 'object' | 'null' | 'array';
type SchemaObjectFormat = 'int32' | 'int64' | 'float' | 'double' | 'byte' | 'binary' | 'date' | 'date-time' | 'password' | string;
interface SchemaObject$2 extends ISpecificationExtension {
    nullable?: boolean;
    discriminator?: DiscriminatorObject$1;
    readOnly?: boolean;
    writeOnly?: boolean;
    xml?: XmlObject$1;
    externalDocs?: ExternalDocumentationObject$1;
    example?: any;
    examples?: any[];
    deprecated?: boolean;
    type?: SchemaObjectType$1 | SchemaObjectType$1[];
    format?: SchemaObjectFormat;
    allOf?: (SchemaObject$2 | ReferenceObject$1)[];
    oneOf?: (SchemaObject$2 | ReferenceObject$1)[];
    anyOf?: (SchemaObject$2 | ReferenceObject$1)[];
    not?: SchemaObject$2 | ReferenceObject$1;
    items?: SchemaObject$2 | ReferenceObject$1;
    properties?: {
        [propertyName: string]: SchemaObject$2 | ReferenceObject$1;
    };
    additionalProperties?: SchemaObject$2 | ReferenceObject$1 | boolean;
    description?: string;
    default?: any;
    title?: string;
    multipleOf?: number;
    maximum?: number;
    exclusiveMaximum?: boolean;
    minimum?: number;
    exclusiveMinimum?: boolean;
    maxLength?: number;
    minLength?: number;
    pattern?: string;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string[];
    enum?: any[];
}
interface SchemasObject$1 {
    [schema: string]: SchemaObject$2;
}
interface DiscriminatorObject$1 {
    propertyName: string;
    mapping?: {
        [key: string]: string;
    };
}
interface XmlObject$1 extends ISpecificationExtension {
    name?: string;
    namespace?: string;
    prefix?: string;
    attribute?: boolean;
    wrapped?: boolean;
}
type SecuritySchemeType$1 = 'apiKey' | 'http' | 'oauth2' | 'openIdConnect';
interface SecuritySchemeObject$1 extends ISpecificationExtension {
    type: SecuritySchemeType$1;
    description?: string;
    name?: string;
    in?: string;
    scheme?: string;
    bearerFormat?: string;
    flows?: OAuthFlowsObject$1;
    openIdConnectUrl?: string;
}
interface OAuthFlowsObject$1 extends ISpecificationExtension {
    implicit?: OAuthFlowObject$1;
    password?: OAuthFlowObject$1;
    clientCredentials?: OAuthFlowObject$1;
    authorizationCode?: OAuthFlowObject$1;
}
interface OAuthFlowObject$1 extends ISpecificationExtension {
    authorizationUrl?: string;
    tokenUrl?: string;
    refreshUrl?: string;
    scopes: ScopesObject$1;
}
interface ScopesObject$1 extends ISpecificationExtension {
    [scope: string]: any;
}
interface SecurityRequirementObject$1 {
    [name: string]: string[];
}

type oas30_IExtensionName = IExtensionName;
type oas30_IExtensionType = IExtensionType;
type oas30_ISpecificationExtension = ISpecificationExtension;
type oas30_SchemaObjectFormat = SchemaObjectFormat;
type oas30_ServerObject = ServerObject;
type oas30_ServerVariableObject = ServerVariableObject;
declare namespace oas30 {
  export type { BaseParameterObject$1 as BaseParameterObject, CallbackObject$1 as CallbackObject, CallbacksObject$1 as CallbacksObject, ComponentsObject$2 as ComponentsObject, ContactObject$1 as ContactObject, ContentObject$1 as ContentObject, DiscriminatorObject$1 as DiscriminatorObject, EncodingObject$1 as EncodingObject, EncodingPropertyObject$1 as EncodingPropertyObject, ExampleObject$1 as ExampleObject, ExamplesObject$1 as ExamplesObject, ExternalDocumentationObject$1 as ExternalDocumentationObject, HeaderObject$1 as HeaderObject, HeadersObject$1 as HeadersObject, oas30_IExtensionName as IExtensionName, oas30_IExtensionType as IExtensionType, oas30_ISpecificationExtension as ISpecificationExtension, InfoObject$1 as InfoObject, LicenseObject$1 as LicenseObject, LinkObject$1 as LinkObject, LinkParametersObject$1 as LinkParametersObject, LinksObject$1 as LinksObject, MediaTypeObject$1 as MediaTypeObject, OAuthFlowObject$1 as OAuthFlowObject, OAuthFlowsObject$1 as OAuthFlowsObject, OpenAPIObject$1 as OpenAPIObject, OperationObject$1 as OperationObject, ParameterLocation$1 as ParameterLocation, ParameterObject$1 as ParameterObject, ParameterStyle$1 as ParameterStyle, PathItemObject$1 as PathItemObject, PathObject$1 as PathObject, PathsObject$1 as PathsObject, ReferenceObject$1 as ReferenceObject, RequestBodyObject$1 as RequestBodyObject, ResponseObject$1 as ResponseObject, ResponsesObject$1 as ResponsesObject, SchemaObject$2 as SchemaObject, oas30_SchemaObjectFormat as SchemaObjectFormat, SchemaObjectType$1 as SchemaObjectType, SchemasObject$1 as SchemasObject, ScopesObject$1 as ScopesObject, SecurityRequirementObject$1 as SecurityRequirementObject, SecuritySchemeObject$1 as SecuritySchemeObject, SecuritySchemeType$1 as SecuritySchemeType, oas30_ServerObject as ServerObject, oas30_ServerVariableObject as ServerVariableObject, TagObject$1 as TagObject, XmlObject$1 as XmlObject };
}

interface OpenAPIObject extends ISpecificationExtension {
    openapi: string;
    info: InfoObject;
    servers?: ServerObject[];
    paths?: PathsObject;
    components?: ComponentsObject$1;
    security?: SecurityRequirementObject[];
    tags?: TagObject[];
    externalDocs?: ExternalDocumentationObject;
    webhooks?: PathsObject;
}
interface InfoObject extends ISpecificationExtension {
    title: string;
    description?: string;
    termsOfService?: string;
    contact?: ContactObject;
    license?: LicenseObject;
    version: string;
}
interface ContactObject extends ISpecificationExtension {
    name?: string;
    url?: string;
    email?: string;
}
interface LicenseObject extends ISpecificationExtension {
    name: string;
    identifier?: string;
    url?: string;
}
interface ComponentsObject$1 extends ISpecificationExtension {
    schemas?: {
        [schema: string]: SchemaObject$1 | ReferenceObject;
    };
    responses?: {
        [response: string]: ResponseObject | ReferenceObject;
    };
    parameters?: {
        [parameter: string]: ParameterObject | ReferenceObject;
    };
    examples?: {
        [example: string]: ExampleObject | ReferenceObject;
    };
    requestBodies?: {
        [request: string]: RequestBodyObject | ReferenceObject;
    };
    headers?: {
        [header: string]: HeaderObject | ReferenceObject;
    };
    securitySchemes?: {
        [securityScheme: string]: SecuritySchemeObject | ReferenceObject;
    };
    links?: {
        [link: string]: LinkObject | ReferenceObject;
    };
    callbacks?: {
        [callback: string]: CallbackObject | ReferenceObject;
    };
}
interface PathsObject extends ISpecificationExtension {
    [path: string]: PathItemObject;
}
type PathObject = PathsObject;
interface PathItemObject extends ISpecificationExtension {
    $ref?: string;
    summary?: string;
    description?: string;
    get?: OperationObject;
    put?: OperationObject;
    post?: OperationObject;
    delete?: OperationObject;
    options?: OperationObject;
    head?: OperationObject;
    patch?: OperationObject;
    trace?: OperationObject;
    servers?: ServerObject[];
    parameters?: (ParameterObject | ReferenceObject)[];
}
interface OperationObject extends ISpecificationExtension {
    tags?: string[];
    summary?: string;
    description?: string;
    externalDocs?: ExternalDocumentationObject;
    operationId?: string;
    parameters?: (ParameterObject | ReferenceObject)[];
    requestBody?: RequestBodyObject | ReferenceObject;
    responses?: ResponsesObject;
    callbacks?: CallbacksObject;
    deprecated?: boolean;
    security?: SecurityRequirementObject[];
    servers?: ServerObject[];
}
interface ExternalDocumentationObject extends ISpecificationExtension {
    description?: string;
    url: string;
}
type ParameterLocation = 'query' | 'header' | 'path' | 'cookie';
type ParameterStyle = 'matrix' | 'label' | 'form' | 'simple' | 'spaceDelimited' | 'pipeDelimited' | 'deepObject';
interface BaseParameterObject extends ISpecificationExtension {
    description?: string;
    required?: boolean;
    deprecated?: boolean;
    allowEmptyValue?: boolean;
    style?: ParameterStyle;
    explode?: boolean;
    allowReserved?: boolean;
    schema?: SchemaObject$1 | ReferenceObject;
    examples?: {
        [param: string]: ExampleObject | ReferenceObject;
    };
    example?: any;
    content?: ContentObject;
}
interface ParameterObject extends BaseParameterObject {
    name: string;
    in: ParameterLocation;
}
interface RequestBodyObject extends ISpecificationExtension {
    description?: string;
    content: ContentObject;
    required?: boolean;
}
interface ContentObject {
    [mediatype: string]: MediaTypeObject;
}
interface MediaTypeObject extends ISpecificationExtension {
    schema?: SchemaObject$1 | ReferenceObject;
    examples?: ExamplesObject;
    example?: any;
    encoding?: EncodingObject;
}
interface EncodingObject extends ISpecificationExtension {
    [property: string]: EncodingPropertyObject | any;
}
interface EncodingPropertyObject {
    contentType?: string;
    headers?: {
        [key: string]: HeaderObject | ReferenceObject;
    };
    style?: string;
    explode?: boolean;
    allowReserved?: boolean;
    [key: string]: any;
}
interface ResponsesObject extends ISpecificationExtension {
    default?: ResponseObject | ReferenceObject;
    [statuscode: string]: ResponseObject | ReferenceObject | any;
}
interface ResponseObject extends ISpecificationExtension {
    description: string;
    headers?: HeadersObject;
    content?: ContentObject;
    links?: LinksObject;
}
interface CallbacksObject extends ISpecificationExtension {
    [name: string]: CallbackObject | ReferenceObject | any;
}
interface CallbackObject extends ISpecificationExtension {
    [name: string]: PathItemObject | any;
}
interface HeadersObject {
    [name: string]: HeaderObject | ReferenceObject;
}
interface ExampleObject {
    summary?: string;
    description?: string;
    value?: any;
    externalValue?: string;
    [property: string]: any;
}
interface LinksObject {
    [name: string]: LinkObject | ReferenceObject;
}
interface LinkObject extends ISpecificationExtension {
    operationRef?: string;
    operationId?: string;
    parameters?: LinkParametersObject;
    requestBody?: any | string;
    description?: string;
    server?: ServerObject;
    [property: string]: any;
}
interface LinkParametersObject {
    [name: string]: any | string;
}
interface HeaderObject extends BaseParameterObject {
    $ref?: string;
}
interface TagObject extends ISpecificationExtension {
    name: string;
    description?: string;
    externalDocs?: ExternalDocumentationObject;
    [extension: string]: any;
}
interface ExamplesObject {
    [name: string]: ExampleObject | ReferenceObject;
}
interface ReferenceObject {
    $ref: string;
    summary?: string;
    description?: string;
}
type SchemaObjectType = 'integer' | 'number' | 'string' | 'boolean' | 'object' | 'null' | 'array';
interface SchemaObject$1 extends ISpecificationExtension {
    discriminator?: DiscriminatorObject;
    readOnly?: boolean;
    writeOnly?: boolean;
    xml?: XmlObject;
    externalDocs?: ExternalDocumentationObject;
    example?: any;
    examples?: any[];
    deprecated?: boolean;
    type?: SchemaObjectType | SchemaObjectType[];
    format?: 'int32' | 'int64' | 'float' | 'double' | 'byte' | 'binary' | 'date' | 'date-time' | 'password' | string;
    allOf?: (SchemaObject$1 | ReferenceObject)[];
    oneOf?: (SchemaObject$1 | ReferenceObject)[];
    anyOf?: (SchemaObject$1 | ReferenceObject)[];
    not?: SchemaObject$1 | ReferenceObject;
    items?: SchemaObject$1 | ReferenceObject;
    properties?: {
        [propertyName: string]: SchemaObject$1 | ReferenceObject;
    };
    additionalProperties?: SchemaObject$1 | ReferenceObject | boolean;
    propertyNames?: SchemaObject$1 | ReferenceObject;
    description?: string;
    default?: any;
    title?: string;
    multipleOf?: number;
    maximum?: number;
    const?: any;
    exclusiveMaximum?: number;
    minimum?: number;
    exclusiveMinimum?: number;
    maxLength?: number;
    minLength?: number;
    pattern?: string;
    maxItems?: number;
    minItems?: number;
    uniqueItems?: boolean;
    maxProperties?: number;
    minProperties?: number;
    required?: string[];
    enum?: any[];
    prefixItems?: (SchemaObject$1 | ReferenceObject)[];
    contentMediaType?: string;
    contentEncoding?: string;
}
interface SchemasObject {
    [schema: string]: SchemaObject$1;
}
interface DiscriminatorObject {
    propertyName: string;
    mapping?: {
        [key: string]: string;
    };
}
interface XmlObject extends ISpecificationExtension {
    name?: string;
    namespace?: string;
    prefix?: string;
    attribute?: boolean;
    wrapped?: boolean;
}
type SecuritySchemeType = 'apiKey' | 'http' | 'oauth2' | 'openIdConnect';
interface SecuritySchemeObject extends ISpecificationExtension {
    type: SecuritySchemeType;
    description?: string;
    name?: string;
    in?: string;
    scheme?: string;
    bearerFormat?: string;
    flows?: OAuthFlowsObject;
    openIdConnectUrl?: string;
}
interface OAuthFlowsObject extends ISpecificationExtension {
    implicit?: OAuthFlowObject;
    password?: OAuthFlowObject;
    clientCredentials?: OAuthFlowObject;
    authorizationCode?: OAuthFlowObject;
}
interface OAuthFlowObject extends ISpecificationExtension {
    authorizationUrl?: string;
    tokenUrl?: string;
    refreshUrl?: string;
    scopes: ScopesObject;
}
interface ScopesObject extends ISpecificationExtension {
    [scope: string]: any;
}
interface SecurityRequirementObject {
    [name: string]: string[];
}

type oas31_BaseParameterObject = BaseParameterObject;
type oas31_CallbackObject = CallbackObject;
type oas31_CallbacksObject = CallbacksObject;
type oas31_ContactObject = ContactObject;
type oas31_ContentObject = ContentObject;
type oas31_DiscriminatorObject = DiscriminatorObject;
type oas31_EncodingObject = EncodingObject;
type oas31_EncodingPropertyObject = EncodingPropertyObject;
type oas31_ExampleObject = ExampleObject;
type oas31_ExamplesObject = ExamplesObject;
type oas31_ExternalDocumentationObject = ExternalDocumentationObject;
type oas31_HeaderObject = HeaderObject;
type oas31_HeadersObject = HeadersObject;
type oas31_IExtensionName = IExtensionName;
type oas31_IExtensionType = IExtensionType;
type oas31_ISpecificationExtension = ISpecificationExtension;
type oas31_InfoObject = InfoObject;
type oas31_LicenseObject = LicenseObject;
type oas31_LinkObject = LinkObject;
type oas31_LinkParametersObject = LinkParametersObject;
type oas31_LinksObject = LinksObject;
type oas31_MediaTypeObject = MediaTypeObject;
type oas31_OAuthFlowObject = OAuthFlowObject;
type oas31_OAuthFlowsObject = OAuthFlowsObject;
type oas31_OpenAPIObject = OpenAPIObject;
type oas31_OperationObject = OperationObject;
type oas31_ParameterLocation = ParameterLocation;
type oas31_ParameterObject = ParameterObject;
type oas31_ParameterStyle = ParameterStyle;
type oas31_PathItemObject = PathItemObject;
type oas31_PathObject = PathObject;
type oas31_PathsObject = PathsObject;
type oas31_ReferenceObject = ReferenceObject;
type oas31_RequestBodyObject = RequestBodyObject;
type oas31_ResponseObject = ResponseObject;
type oas31_ResponsesObject = ResponsesObject;
type oas31_SchemaObjectType = SchemaObjectType;
type oas31_SchemasObject = SchemasObject;
type oas31_ScopesObject = ScopesObject;
type oas31_SecurityRequirementObject = SecurityRequirementObject;
type oas31_SecuritySchemeObject = SecuritySchemeObject;
type oas31_SecuritySchemeType = SecuritySchemeType;
type oas31_ServerObject = ServerObject;
type oas31_ServerVariableObject = ServerVariableObject;
type oas31_TagObject = TagObject;
type oas31_XmlObject = XmlObject;
declare namespace oas31 {
  export type { oas31_BaseParameterObject as BaseParameterObject, oas31_CallbackObject as CallbackObject, oas31_CallbacksObject as CallbacksObject, ComponentsObject$1 as ComponentsObject, oas31_ContactObject as ContactObject, oas31_ContentObject as ContentObject, oas31_DiscriminatorObject as DiscriminatorObject, oas31_EncodingObject as EncodingObject, oas31_EncodingPropertyObject as EncodingPropertyObject, oas31_ExampleObject as ExampleObject, oas31_ExamplesObject as ExamplesObject, oas31_ExternalDocumentationObject as ExternalDocumentationObject, oas31_HeaderObject as HeaderObject, oas31_HeadersObject as HeadersObject, oas31_IExtensionName as IExtensionName, oas31_IExtensionType as IExtensionType, oas31_ISpecificationExtension as ISpecificationExtension, oas31_InfoObject as InfoObject, oas31_LicenseObject as LicenseObject, oas31_LinkObject as LinkObject, oas31_LinkParametersObject as LinkParametersObject, oas31_LinksObject as LinksObject, oas31_MediaTypeObject as MediaTypeObject, oas31_OAuthFlowObject as OAuthFlowObject, oas31_OAuthFlowsObject as OAuthFlowsObject, oas31_OpenAPIObject as OpenAPIObject, oas31_OperationObject as OperationObject, oas31_ParameterLocation as ParameterLocation, oas31_ParameterObject as ParameterObject, oas31_ParameterStyle as ParameterStyle, oas31_PathItemObject as PathItemObject, oas31_PathObject as PathObject, oas31_PathsObject as PathsObject, oas31_ReferenceObject as ReferenceObject, oas31_RequestBodyObject as RequestBodyObject, oas31_ResponseObject as ResponseObject, oas31_ResponsesObject as ResponsesObject, SchemaObject$1 as SchemaObject, oas31_SchemaObjectType as SchemaObjectType, oas31_SchemasObject as SchemasObject, oas31_ScopesObject as ScopesObject, oas31_SecurityRequirementObject as SecurityRequirementObject, oas31_SecuritySchemeObject as SecuritySchemeObject, oas31_SecuritySchemeType as SecuritySchemeType, oas31_ServerObject as ServerObject, oas31_ServerVariableObject as ServerVariableObject, oas31_TagObject as TagObject, oas31_XmlObject as XmlObject };
}

declare const openApiVersions: readonly ["3.0.0", "3.0.1", "3.0.2", "3.0.3", "3.1.0"];
type OpenApiVersion = (typeof openApiVersions)[number];

interface ZodOpenApiMediaTypeObject extends Omit<MediaTypeObject & MediaTypeObject$1, 'schema'> {
    schema?: ZodType | SchemaObject$1 | ReferenceObject;
}
interface ZodOpenApiContentObject {
    'application/json'?: ZodOpenApiMediaTypeObject;
    [mediatype: string]: ZodOpenApiMediaTypeObject | undefined;
}
interface ZodOpenApiRequestBodyObject extends Omit<RequestBodyObject & RequestBodyObject$1, 'content'> {
    content: ZodOpenApiContentObject;
    /** Use this field to auto register this request body as a component */
    ref?: string;
}
interface ZodOpenApiResponseObject extends Omit<ResponseObject & ResponseObject$1, 'content' | 'headers'> {
    content?: ZodOpenApiContentObject;
    headers?: AnyZodObject | HeadersObject$1 | HeadersObject;
    /** Use this field to auto register this response object as a component */
    ref?: string;
}
interface ZodOpenApiResponsesObject extends ISpecificationExtension {
    default?: ZodOpenApiResponseObject | ReferenceObject | ReferenceObject$1;
    [statuscode: `${1 | 2 | 3 | 4 | 5}${string}`]: ZodOpenApiResponseObject | ReferenceObject;
}
type ZodOpenApiParameters = {
    [type in ParameterLocation & ParameterLocation$1]?: ZodObjectInputType;
};
interface ZodOpenApiCallbacksObject extends ISpecificationExtension {
    [name: string]: ZodOpenApiCallbackObject;
}
interface ZodOpenApiCallbackObject extends ISpecificationExtension {
    /** Use this field to auto register this callback object as a component */
    ref?: string;
    [name: string]: ZodOpenApiPathItemObject | string | undefined;
}
interface ZodOpenApiOperationObject extends Omit<OperationObject & OperationObject$1, 'requestBody' | 'responses' | 'parameters' | 'callbacks'> {
    parameters?: Array<ZodType | ParameterObject | ParameterObject$1 | ReferenceObject | ReferenceObject$1>;
    requestBody?: ZodOpenApiRequestBodyObject;
    requestParams?: ZodOpenApiParameters;
    responses: ZodOpenApiResponsesObject;
    callbacks?: ZodOpenApiCallbacksObject;
}
interface ZodOpenApiPathItemObject extends Omit<PathItemObject & PathItemObject$1, 'get' | 'put' | 'post' | 'delete' | 'options' | 'head' | 'patch' | 'trace'> {
    get?: ZodOpenApiOperationObject;
    put?: ZodOpenApiOperationObject;
    post?: ZodOpenApiOperationObject;
    delete?: ZodOpenApiOperationObject;
    options?: ZodOpenApiOperationObject;
    head?: ZodOpenApiOperationObject;
    patch?: ZodOpenApiOperationObject;
    trace?: ZodOpenApiOperationObject;
}
interface ZodOpenApiPathsObject extends ISpecificationExtension {
    [path: string]: ZodOpenApiPathItemObject;
}
interface ZodOpenApiComponentsObject extends Omit<ComponentsObject$1 & ComponentsObject$2, 'schemas' | 'responses' | 'requestBodies' | 'headers' | 'parameters'> {
    parameters?: Record<string, ZodType | ParameterObject | ParameterObject$1 | ReferenceObject | ReferenceObject$1>;
    schemas?: Record<string, ZodType | SchemaObject$1 | ReferenceObject | SchemaObject$2 | ReferenceObject$1>;
    requestBodies?: Record<string, ZodOpenApiRequestBodyObject>;
    headers?: Record<string, ZodType | HeaderObject | HeaderObject$1 | ReferenceObject | ReferenceObject$1>;
    responses?: Record<string, ZodOpenApiResponseObject>;
    callbacks?: Record<string, ZodOpenApiCallbackObject>;
}
type ZodOpenApiVersion = OpenApiVersion;
interface ZodOpenApiObject extends Omit<OpenAPIObject, 'openapi' | 'paths' | 'webhooks' | 'components'> {
    openapi: ZodOpenApiVersion;
    paths?: ZodOpenApiPathsObject;
    webhooks?: ZodOpenApiPathsObject;
    components?: ZodOpenApiComponentsObject;
}
type ZodObjectInputType<Output = unknown, Def extends ZodTypeDef = ZodTypeDef, Input = Record<string, unknown>> = ZodType<Output, Def, Input>;
declare const createDocument: (zodOpenApiObject: ZodOpenApiObject) => OpenAPIObject;

type CreationType = 'input' | 'output';
type BaseEffect = {
    zodType: ZodType;
    path: string[];
};
type ComponentEffect = BaseEffect & {
    type: 'component';
};
type SchemaEffect = BaseEffect & {
    type: 'schema';
    creationType: CreationType;
};
type Effect = ComponentEffect | SchemaEffect;
type ResolvedEffect = {
    creationType: CreationType;
    path: string[];
    zodType: ZodType;
    component?: {
        ref: string;
        zodType: ZodType;
        path: string[];
    };
};
interface CompleteSchemaComponent extends BaseSchemaComponent {
    type: 'complete';
    schemaObject: SchemaObject$1 | ReferenceObject | SchemaObject$2 | ReferenceObject$1;
    /** Set when the created schemaObject is specific to a particular effect */
    effects?: Effect[];
    resolvedEffect?: ResolvedEffect;
}
/**
 *
 */
interface ManualSchemaComponent extends BaseSchemaComponent {
    type: 'manual';
}
interface InProgressSchemaComponent extends BaseSchemaComponent {
    type: 'in-progress';
}
interface BaseSchemaComponent {
    ref: string;
}
type SchemaComponent = CompleteSchemaComponent | ManualSchemaComponent | InProgressSchemaComponent;
type SchemaComponentMap = Map<ZodType, SchemaComponent>;
interface CompleteParameterComponent extends BaseParameterComponent {
    type: 'complete';
    paramObject: ParameterObject | ReferenceObject | ParameterObject$1 | ReferenceObject$1;
}
interface PartialParameterComponent extends BaseParameterComponent {
    type: 'manual';
}
interface BaseParameterComponent {
    ref: string;
    in: ParameterLocation;
    name: string;
}
type ParameterComponent = CompleteParameterComponent | PartialParameterComponent;
type ParameterComponentMap = Map<ZodType, ParameterComponent>;
interface CompleteHeaderComponent extends BaseHeaderComponent {
    type: 'complete';
    headerObject: HeaderObject | ReferenceObject | HeaderObject$1 | ReferenceObject$1;
}
interface PartialHeaderComponent extends BaseHeaderComponent {
    type: 'manual';
}
interface BaseHeaderComponent {
    ref: string;
}
type HeaderComponent = CompleteHeaderComponent | PartialHeaderComponent;
type HeaderComponentMap = Map<ZodType, HeaderComponent>;
interface BaseResponseComponent {
    ref: string;
}
interface CompleteResponseComponent extends BaseResponseComponent {
    type: 'complete';
    responseObject: ResponseObject | ReferenceObject | ResponseObject$1 | ReferenceObject$1;
}
interface PartialResponseComponent extends BaseResponseComponent {
    type: 'manual';
}
type ResponseComponent = CompleteResponseComponent | PartialResponseComponent;
type ResponseComponentMap = Map<ZodOpenApiResponseObject, ResponseComponent>;
interface BaseRequestBodyComponent {
    ref: string;
}
interface CompleteRequestBodyComponent extends BaseRequestBodyComponent {
    type: 'complete';
    requestBodyObject: RequestBodyObject | ReferenceObject | RequestBodyObject$1 | ReferenceObject$1;
}
interface PartialRequestBodyComponent extends BaseRequestBodyComponent {
    type: 'manual';
}
type RequestBodyComponent = CompleteRequestBodyComponent | PartialRequestBodyComponent;
type RequestBodyComponentMap = Map<ZodOpenApiRequestBodyObject, RequestBodyComponent>;
interface BaseCallbackComponent {
    ref: string;
}
interface CompleteCallbackComponent extends BaseCallbackComponent {
    type: 'complete';
    callbackObject: ZodOpenApiCallbackObject | CallbackObject | CallbackObject$1;
}
interface PartialCallbackComponent extends BaseCallbackComponent {
    type: 'manual';
}
type CallbackComponent = CompleteCallbackComponent | PartialCallbackComponent;
type CallbackComponentMap = Map<ZodOpenApiCallbackObject, CallbackComponent>;
interface ComponentsObject {
    schemas: SchemaComponentMap;
    parameters: ParameterComponentMap;
    headers: HeaderComponentMap;
    requestBodies: RequestBodyComponentMap;
    responses: ResponseComponentMap;
    callbacks: CallbackComponentMap;
    openapi: ZodOpenApiVersion;
}
declare const getDefaultComponents: (componentsObject?: ZodOpenApiComponentsObject, openapi?: ZodOpenApiVersion) => ComponentsObject;
declare const createComponents: (componentsObject: ZodOpenApiComponentsObject, components: ComponentsObject) => ComponentsObject$1 | undefined;

type SchemaObject = SchemaObject$2 & SchemaObject$1;
/**
 * zod-openapi metadata
 */
interface ZodOpenApiMetadata<T extends ZodTypeAny, TInferred = z.input<T> | z.output<T>> extends SchemaObject {
    example?: TInferred;
    examples?: [TInferred, ...TInferred[]];
    default?: T extends ZodDate ? string : TInferred;
    /**
     * Used to set the output of a ZodUnion to be `oneOf` instead of `allOf`
     */
    unionOneOf?: boolean;
    /**
     * Used to output this Zod Schema in the components schemas section. Any usage of this Zod Schema will then be transformed into a $ref.
     */
    ref?: string;
    /**
     * Used when you are manually adding a Zod Schema to the components section. This controls whether this should be rendered as request (`input`) or response (`output`). Defaults to `output`
     */
    refType?: CreationType;
    /**
     * Used to set the created type of an effect.
     */
    effectType?: CreationType | (z.input<T> extends z.output<T> ? z.output<T> extends z.input<T> ? 'same' : never : never);
    /**
     * Used to set metadata for a parameter, request header or cookie
     */
    param?: Partial<ParameterObject> & {
        example?: TInferred;
        examples?: Record<string, (ExampleObject & {
            value: TInferred;
        }) | ReferenceObject>;
        /**
         * Used to output this Zod Schema in the components parameters section. Any usage of this Zod Schema will then be transformed into a $ref.
         */
        ref?: string;
    };
    /**
     * Used to set data for a response header
     */
    header?: Partial<HeaderObject & HeaderObject$1> & {
        /**
         * Used to output this Zod Schema in the components headers section. Any usage of this Zod Schema will then be transformed into a $ref.
         */
        ref?: string;
    };
    /**
     * Used to override the generated type. If this is provided no metadata will be generated.
     */
    type?: SchemaObject['type'];
}
interface ZodOpenApiExtendMetadata {
    extends: ZodObject<any, any, any, any, any>;
}
declare module 'zod' {
    interface ZodType {
        /**
         * Add OpenAPI metadata to a Zod Type
         */
        openapi<T extends ZodTypeAny>(this: T, metadata: ZodOpenApiMetadata<T>): T;
    }
    interface ZodTypeDef {
        /**
         * OpenAPI metadata
         */
        openapi?: ZodOpenApiMetadata<ZodTypeAny>;
    }
    interface ZodObjectDef {
        extendMetadata?: ZodOpenApiExtendMetadata;
    }
}

declare function extendZodWithOpenApi(zod: typeof z): void;

declare const createMediaTypeSchema: (schemaObject: ZodType | SchemaObject$1 | ReferenceObject | undefined, components: ComponentsObject, type: CreationType, subpath: string[]) => SchemaObject$1 | ReferenceObject | undefined;

declare const createParamOrRef: (zodSchema: ZodType, components: ComponentsObject, subpath: string[], type?: keyof ZodOpenApiParameters, name?: string) => ParameterObject | ReferenceObject;

type api_ComponentsObject = ComponentsObject;
declare const api_createComponents: typeof createComponents;
declare const api_createMediaTypeSchema: typeof createMediaTypeSchema;
declare const api_createParamOrRef: typeof createParamOrRef;
declare const api_getDefaultComponents: typeof getDefaultComponents;
declare namespace api {
  export { type api_ComponentsObject as ComponentsObject, api_createComponents as createComponents, api_createMediaTypeSchema as createMediaTypeSchema, api_createParamOrRef as createParamOrRef, api_getDefaultComponents as getDefaultComponents };
}

export { type ZodObjectInputType, type ZodOpenApiCallbackObject, type ZodOpenApiCallbacksObject, type ZodOpenApiComponentsObject, type ZodOpenApiContentObject, type ZodOpenApiMediaTypeObject, type ZodOpenApiObject, type ZodOpenApiOperationObject, type ZodOpenApiParameters, type ZodOpenApiPathItemObject, type ZodOpenApiPathsObject, type ZodOpenApiRequestBodyObject, type ZodOpenApiResponseObject, type ZodOpenApiResponsesObject, type ZodOpenApiVersion, api, createDocument, extendZodWithOpenApi, oas30, oas31 };
